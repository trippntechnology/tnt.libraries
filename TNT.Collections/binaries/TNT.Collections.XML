<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TNT.Collections</name>
    </assembly>
    <members>
        <member name="T:TNT.Collections.Graph`2">
            <summary>
            Represents a graph
            </summary>
            <typeparam name="N">Node container type</typeparam>
            <typeparam name="E">Edge container type</typeparam>
        </member>
        <member name="M:TNT.Collections.Graph`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TNT.Collections.Graph`2.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="allowCircularLinks">Indicates whether the graph allow cycles. (Default: false)</param>
        </member>
        <member name="M:TNT.Collections.Graph`2.CreateEdge(`1,`0,`0)">
            <summary>
            Creates an edge between two nodes with the bound objects
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="edgeObj"></param>
            <param name="nodeObj1"></param>
            <param name="nodeObj2"></param>
            <returns></returns>
        </member>
        <member name="M:TNT.Collections.Graph`2.FindGraphNode(`0)">
            <summary>
            Finds a graph node who has the nodeObj bound
            </summary>
            <param name="nodeObj">Object that is bound to the node</param>
            <returns>Graph node if found, null otherwise</returns>
        </member>
        <member name="M:TNT.Collections.Graph`2.FindGraphEdge(`1)">
            <summary>
            Finds a graph edge who has the edgeObj bound
            </summary>
            <param name="edgeObj">Object that is bound to the edge</param>
            <returns></returns>
        </member>
        <member name="M:TNT.Collections.Graph`2.FindConnectedNode(TNT.Collections.GraphNode{`0,`1},TNT.Collections.GraphNode{`0,`1},System.Boolean)">
            <summary>
            Finds the searchNode if it is connected to startNode
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="startNode">Node to start search from</param>
            <param name="searchNode">Node that is being searched for</param>
            <param name="reset">Specifies whether or not the node's Visited property should be set to false</param>
            <returns>Node if found, false otherwise</returns>
        </member>
        <member name="P:TNT.Collections.Graph`2.Edges">
            <summary>
            List of edges
            </summary>
        </member>
        <member name="P:TNT.Collections.Graph`2.Nodes">
            <summary>
            List of nodes
            </summary>
        </member>
        <member name="P:TNT.Collections.Graph`2.AllowCircularLinks">
            <summary>
            Indicates whether the graph allows circular linkds
            </summary>
        </member>
        <member name="T:TNT.Collections.GraphEdge`2">
            <summary>
            Represents a graph edge where object on the edge is type E and the node 
            objects are type N
            </summary>
            <typeparam name="E">Edge's object type</typeparam>
            <typeparam name="N">Node's object type</typeparam>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.#ctor(`0,TNT.Collections.GraphNode{`1,`0},TNT.Collections.GraphNode{`1,`0})">
            <summary>
            Constructor.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="obj">Object to bind to the edge</param>
            <param name="node1">One of two nodes that are connected by this edge</param>
            <param name="node2">One of two nodes that are connected by this edge</param>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Equality(TNT.Collections.GraphEdge{`0,`1},TNT.Collections.GraphEdge{`0,`1})">
            <summary>
            Operator == for objects of type GraphEdge&lt;E, N&gt; 
            </summary>
            <param name="ge1">First comparer</param>
            <param name="ge2">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Inequality(TNT.Collections.GraphEdge{`0,`1},TNT.Collections.GraphEdge{`0,`1})">
            <summary>
            Operator != for objects of type GraphEdge&lt;E, N&gt;
            </summary>
            <param name="ge1">First comparer</param>
            <param name="ge2">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Equality(TNT.Collections.GraphEdge{`0,`1},`0)">
            <summary>
            Operator == for objects of type GraphEdge&lt;E, N&gt; and type E
            </summary>
            <param name="ge">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Equality(`0,TNT.Collections.GraphEdge{`0,`1})">
            <summary>
            Operator == for objects of type GraphEdge&lt;E, N&gt; and type E
            </summary>
            <param name="ge">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Inequality(TNT.Collections.GraphEdge{`0,`1},`0)">
            <summary>
            Operator != for objects of type GraphEdge&lt;E, N&gt; and type E
            </summary>
            <param name="ge">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.op_Inequality(`0,TNT.Collections.GraphEdge{`0,`1})">
            <summary>
            Operator != for objects of type GraphEdge&lt;E, N&gt; and type E
            </summary>
            <param name="ge">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="M:TNT.Collections.GraphEdge`2.GetOppositeNode(TNT.Collections.GraphNode{`1,`0})">
            <summary>
            Returns the node on the other end of the edge
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="node">Known node</param>
            <returns>Node on the other end of the edge</returns>
        </member>
        <member name="P:TNT.Collections.GraphEdge`2.Object">
            <summary>
            Object bound to the edge
            </summary>
        </member>
        <member name="P:TNT.Collections.GraphEdge`2.Node1">
            <summary>
            One of the two nodes connected by this edge
            </summary>
        </member>
        <member name="P:TNT.Collections.GraphEdge`2.Node2">
            <summary>
            One of the two nodes connected by this edge
            </summary>
        </member>
        <member name="T:TNT.Collections.GraphNode`2">
            <summary>
            Represents a graph node where the object on the node is type N and the edges have
            objects of type E
            </summary>
            <typeparam name="N">Node's object type</typeparam>
            <typeparam name="E">Edge's object type</typeparam>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.#ctor(`0)">
            <summary>
            Constructor. Initializes the node's object with obj
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when obj is null</exception>
            <param name="obj">Object to set on the node</param>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Equality(TNT.Collections.GraphNode{`0,`1},TNT.Collections.GraphNode{`0,`1})">
            <summary>
            Operator == for objects of type GraphNode&lt;N, E&gt;
            </summary>
            <param name="gn1">First comparer</param>
            <param name="gn2">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Inequality(TNT.Collections.GraphNode{`0,`1},TNT.Collections.GraphNode{`0,`1})">
            <summary>
            Operator != for objects of type GraphNode&lt;N, E&gt;
            </summary>
            <param name="gn1">First comparer</param>
            <param name="gn2">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Equality(TNT.Collections.GraphNode{`0,`1},`0)">
            <summary>
            Operator == for objects of type GraphNode&lt;N, E&gt; and type N
            </summary>
            <param name="gn">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Equality(`0,TNT.Collections.GraphNode{`0,`1})">
            <summary>
            Operator == for objects of type GraphNode&lt;N, E&gt; and type N
            </summary>
            <param name="gn">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Inequality(TNT.Collections.GraphNode{`0,`1},`0)">
            <summary>
            Operator != for objects of type GraphNode&lt;N, E&gt; and type N
            </summary>
            <param name="gn">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.op_Inequality(`0,TNT.Collections.GraphNode{`0,`1})">
            <summary>
            Operator != for objects of type GraphNode&lt;N, E&gt; and type N
            </summary>
            <param name="gn">First comparer</param>
            <param name="obj">Second comparer</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:TNT.Collections.GraphNode`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="P:TNT.Collections.GraphNode`2.Object">
            <summary>
            Object bound to the node
            </summary>
        </member>
        <member name="P:TNT.Collections.GraphNode`2.Edges">
            <summary>
            Edges connected to this node
            </summary>
        </member>
    </members>
</doc>
